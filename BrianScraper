import requests
import re
import csv
import string
from bs4 import BeautifulSoup

req = requests.get('https://en.wikipedia.org/wiki/List_of_programming_languages') #Grab the list of languages that the database is built on
soup = BeautifulSoup(req.content, 'html.parser')

with open('LanguagesList.csv', 'w') as csvfile:         #Setup for the csv file writer
    writer = csv.writer(csvfile, delimiter=' ', quotechar='|', quoting=csv.QUOTE_MINIMAL)

    links = []
    for letter in soup.find_all('span'):                    #Look through the span tags to find the headings that are a
        ID = letter.get('id')                               #single letter, underneath which the languages will be listed
        if re.match('^.$', str(ID), re.M|re.I) != None:
            for entry in letter.parent.next_sibling.next.find_all('a'):    #Look through the 'a' tags... (gross way of navigating to them, but it required the least code)
                if re.match('^/wiki/*', str(entry.get('href')), re.M|re.I) !=None: #extra check to make sure that the url format matches what we are looking for
                    links.append("https://en.wikipedia.org"+entry.get('href')) #and add the link contained in their href to the list

#print len(links)
    num = 0
    for entry in links: #iterate through the links to the programming languages

        currentLang = requests.get(entry)

        langProperties = []
        currentSoup = BeautifulSoup(currentLang.content, 'html.parser') #Generate a BeautifulSoup entry for this language
        title = unicode(currentSoup.title.contents)
        title = string.replace(title, ' (programming language)', '')
        title = string.replace(title, ' - Wikipedia', '')               #scrub out some of the unwanted text
        langProperties.append(title)                                    #add the title element to this csv entry


        # body = currentSoup.find('div', 'mw-parser-output')                                   #look at the main content of the page
        # info = u''                                                                           #declare a string for info storage (would be a string array in the finished version
        # for navString in body.children:                                                      #    of the project, with indices corresponding to different pieces of information
        #     if navString.name == u'table' and navString['class'] == [u'infobox', u'vevent']: #look at the infobox on the side of the page
        #         for child in navString.tbody.children:
        #             info += unicode(child)                                                   #grab all the text out of it (would clean up the text in finished project)
        #     if navString.name == u'h2':
        #         break                                                                        #stop after the infobox
        # langProperties.append(info)                            #add the infobox element to this csv entry

        writer.writerow(langProperties)               #create the csv entry for this langauge
        num+= 1
        print num
